name: 'Terraform - Staging'

on:
  push:
    branches:
      - master
    paths:
      - staging/**
  pull_request:
    branches:
      - master
    paths:
      - staging/**

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6
          terraform_wrapper: false
      - name: Dirty Debug
        id: debug
        run: |
          pwd
          echo "PWD: ${PWD}"
          echo "ls -al:"
          ls -al
          echo "ls -ltr"
          ls -ltr
          echo "Find folders staging:"
          find . -name staging -type d
      - name: Terraform Init
        id: init
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        working-directory: ./staging
        shell: bash
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        working-directory: ./staging
        shell: bash
      - name: Terraform Show
        id: show
        run: |
          terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: ./staging
        shell: bash
      - name: Write Plan to PR
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('/tmp/plan.txt', 'utf8');
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }

              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters);
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              ### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              }) 
            }

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        working-directory: ./staging
        shell: bash
